pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {

        // Checkout the source code from SCM
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Checkout completed'
            }
        }

        // Clean the Maven project (delete target directory)
        stage('Clean') {
            steps {
                sh 'mvn clean'
                echo 'Clean done'
            }
        }

        // Compile the Java source code
        stage('Build') {
            steps {
                sh 'mvn compile'
                echo 'Build completed'
            }
        }


        /**
        * This stage is used to test the compiled source code.
        * While the previous stages are fairly straightforward, 
        * this one requires a bit more attention.
        *
        * When "mvn test" is executed, Maven runs the unit tests 
        * using a suitable testing framework—typically JUnit—through 
        * the Surefire plugin.
        *
        * After the stage is completed, the "post" section is 
        * used to define actions that should run regardless of 
        * the test result.
        *
        * One of the built-in post-stage commands is "junit", which 
        * tells Jenkins to publish the test reports generated by 
        * Maven. Jenkins can then read and interpret the results, 
        * making them visible in the build summary.
        */


        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        /**
        * The package stage is executed if and if only
        * the previous stage is completed
        */

        stage('Package') {
            steps {
                sh   'mvn package -DskipTests'
                echo 'Packaging done'
            }
        }

        /**
        * In the end, we ask SonarQube to inspect
        * our code.
        */

        // Perform SonarQube static code analysis
        stage('SonarQube') {
            steps {
                withSonarQubeEnv(SONARQUBE_ENV) {
                    sh 'mvn sonar:sonar'
                }
                echo 'SonarQube analysis completed'
            }
        }
    }

    post {
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
